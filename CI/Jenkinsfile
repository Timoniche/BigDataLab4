pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS  = credentials('mle-template')
        DB_CREDS         = credentials('pgaas-lab2')
        VAULT_CREDS      = credentials('vault_lab_3')
        PROJECT_NAME     = "BigDataLab4"
        IMAGE_NAME       = "lab4"
        PG_DB            = "postgres"
        TOPIC_NAME       = "image_predictions"
        PARTITIONS_COUNT = 1
        LC_ALL   = "en_US.UTF-8"
        LANG     = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {
        stage('Clone github repository') {
            steps {
                cleanWs()
                sh 'git clone -b main https://github.com/Timoniche/$PROJECT_NAME.git'
			}
		}

        stage('Checkout repo dir') {
            steps {
                sh 'cd $PROJECT_NAME && dir'
			}
	    }

        stage('Login') {
            steps {
                sh 'docker login -u $DOCKERHUB_CREDS_USR -p $DOCKERHUB_CREDS_PSW'
            }
        }

        stage('Building docker') {
            steps {
                sh 'cd $PROJECT_NAME && docker compose build'
            }
        }

        stage('Building .env file for docker compose') {
            steps {
                dir("$PROJECT_NAME") {
                    sh '''
                        echo PG_USER=$DB_CREDS_USR > .env
                        echo PG_PASSWORD=$DB_CREDS_PSW >> .env
                        echo PG_DB=$PG_DB >> .env
                        echo TOPIC_NAME=$TOPIC_NAME >> .env
                        echo PARTITIONS_COUNT=$PARTITIONS_COUNT >> .env
                    '''
                }
            }
        }

        stage('Create and run docker container') {
            steps {
                dir("$PROJECT_NAME") {
                    sh 'docker compose up -d'
                    sh 'sleep 10'
                    sh 'docker compose logs'
                }
            }
        }

        stage('Coverage run unit tests') {
            steps {
                dir("$PROJECT_NAME") {
                    sh 'docker compose exec web coverage run -a src/unit_tests/test_hog_embeddings.py'
                    sh 'docker compose exec web coverage report -m --ignore-errors'
                }
            }
        }

        stage('Checkout coverage report, images') {
            steps{
                dir("$PROJECT_NAME") {
                    sh 'docker compose images'
                    sh 'docker compose logs -t --tail 50'
                }
            }
        }

        stage('Push') {
            steps {
                sh 'docker push ddulaev/$IMAGE_NAME:latest'
            }
        }
	}

    post {
        always {
            dir("$PROJECT_NAME") {
                sh 'docker compose down'
                sh 'docker logout'
                sh 'rm -f .env'
            }
        }
    }
}
